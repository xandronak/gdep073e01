searchState.loadedDescShard("gdep073e01", 0, "Embedded-graphics driver for the GDEP073E01 7-color …\nBlack color (0x00)\nBlue color (0x05)\nGDEP073E01 color variants.\nError types for the GDEP073E01 driver.\nGDEP073E01 display driver.\nGreen color (0x06)\nDisplay height in pixels\nOrange color (0x04)\nGPIO pin operation error\nRed color (0x03)\nSPI communication error\nTimeout waiting for display ready\nDisplay width in pixels\nWhite color (0x01)\nYellow color (0x02)\nDitherDrawTarget adapter: converts Rgb888 to panel Color …\nClears the internal buffer with the specified color.\nDithering and halftone strategies to map RGB-&gt;Spectra6. …\nUpdates the display with the current buffer contents.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the display.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new GDEP073E01 driver instance.\nSpectra6 palette and mapping utilities. Works in no_std.\nPrelude module for convenient imports.\nSets a pixel in the internal buffer.\nPuts the display into deep sleep mode.\nWrap an embedded-graphics DrawTarget to apply …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOrdered Bayer 4x4: zero-alloc, fast.\nStrategy trait for per-pixel mapping with spatial/temporal …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap an sRGB triple at pixel (x,y) to Spectra6. <code>x,y</code> are …\nPanel order palette RGB centers in sRGB 8-bit. Order: …\nFixed Spectra 6 palette order used by the panel’s …\nUtility: add bias to an rgb triple with saturation.\nUtility: clamp i32 to 0..=255 and return u8.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRGB -&gt; closest Spectra6 color (no dither).\nConvert this Spectra6 color to the driver’s 7-color <code>Color</code>…\nAngle.\nAngleUnit trait.\nBits per pixel.\nBlack color (0% luma).\nBlack color (R: 0%, G: 0%, B: 0%)\nBlue color (R: 0%, G: 0%, B: 100%)\nReturn type of methods in this trait.\n Alice Blue\n Antique White\n Aqua\n Aquamarine\n Azure\n Beige\n Bisque\n Black\n Blanched Almond\n Blue\n Blue Violet\n Brown\n Burly Wood\n Cadet Blue\n Chartreuse\n Chocolate\n Coral\n Cornflower Blue\n Cornsilk\n Crimson\n Cyan\n Dark Blue\n Dark Cyan\n Dark Goldenrod\n Dark Gray\n Dark Green\n Dark Khaki\n Dark Magenta\n Dark Olive Green\n Dark Orange\n Dark Orchid\n Dark Red\n Dark Salmon\n Dark Sea Green\n Dark Slate Blue\n Dark Slate Gray\n Dark Turquoise\n Dark Violet\n Deep Pink\n Deep Sky Blue\n Dim Gray\n Dodger Blue\n Fire Brick\n Floral White\n Forest Green\n Fuchsia\n Gainsboro\n Ghost White\n Gold\n Goldenrod\n Gray\n Green\n Green Yellow\n Honeydew\n Hot Pink\n Indian Red\n Indigo\n Ivory\n Khaki\n Lavender\n Lavender Blush\n Lawn Green\n Lemon Chiffon\n Light Blue\n Light Coral\n Light Cyan\n Light Goldenrod Yellow\n Light Gray\n Light Green\n Light Pink\n Light Salmon\n Light Sea Green\n Light Sky Blue\n Light Slate Gray\n Light Steel Blue\n Light Yellow\n Lime\n Lime Green\n Linen\n Magenta\n Maroon\n Medium Aquamarine\n Medium Blue\n Medium Orchid\n Medium Purple\n Medium Sea Green\n Medium Slate Blue\n Medium Spring Green\n Medium Turquoise\n Medium Violet Red\n Midnight Blue\n Mint Cream\n Misty Rose\n Moccasin\n Navajo White\n Navy\n Old Lace\n Olive\n Olive Drab\n Orange\n Orange Red\n Orchid\n Pale Goldenrod\n Pale Green\n Pale Turquoise\n Pale Violet Red\n Papaya Whip\n Peach Puff\n Peru\n Pink\n Plum\n Powder Blue\n Purple\n Rebeccapurple\n Red\n Rosy Brown\n Royal Blue\n Saddle Brown\n Salmon\n Sandy Brown\n Seashell\n Sea Green\n Sienna\n Silver\n Sky Blue\n Slate Blue\n Slate Gray\n Snow\n Spring Green\n Steel Blue\n Tan\n Teal\n Thistle\n Tomato\n Turquoise\n Violet\n Wheat\n White\n White Smoke\n Yellow\n Yellow Green\nCyan color (R: 0%, G: 100%, B: 100%)\nThe pixel color type the targetted display supports.\nThe pixel color type.\nThe color type.\nTrait to check if a point is inside a closed shape.\nExtension trait for contiguous iterators.\nDelay with up to nanosecond precision.\nError type trait.\nAdds the ability to get the bounding box of an item.\nA target for embedded-graphics drawing operations.\nExtension trait for <code>DrawTarget</code>s.\nMarks an object as “drawable”. Must be implemented for …\nError type to return when a drawing operation fails.\nError type\nError type.\nGreen color (R: 0%, G: 100%, B: 0%)\nGrayscale color.\nImage drawable.\nExtension trait for image drawables.\nSingle digital input pin.\nConvert a <code>PixelColor</code> into its underlying storage type\nIterator over all points inside the primitive.\nMagenta color (R: 100%, G: 0%, B: 100%)\nThe maximum value in the blue channel.\nThe maximum value in the green channel.\nThe maximum value in the red channel.\nOffset outline trait.\nDimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.\nThe return type of the <code>draw</code> method.\nSingle digital push-pull output pin.\nA single pixel.\nPixel color trait.\nExtension trait for pixel iterators.\n2D point.\nCreate an iterator over all points in the primitive.\nPrimitive trait\nRed color (R: 100%, G: 0%, B: 0%)\nRaw data type.\nTrait implemented by all <code>RawUx</code> types.\nRGB color.\n2D size.\nSPI device trait.\nSPI error type trait.\nStorage type.\nThe underlying storage type for the pixel color\nTransform operations\nWhite color (100% luma).\nWhite color (R: 100%, G: 100%, B: 100%)\nNamed colors as defined in the CSS specification.\nYellow color (R: 100%, G: 100%, B: 0%)\nTrait to convert colors into a byte array.\nRemove the sign from a coordinate\nCompute the absolute value of the angle.\nOffsets a point by adding a size.\nOffsets a point by adding a size.\nReturns the blue channel value.\nReturns the bounding box.\nFill the entire display with a solid color.\nCreates a clipped draw target based on this draw target.\nCreates a color conversion draw target.\nReturns the componentwise division of two <code>Points</code>s.\nReturns the componentwise division of two <code>Size</code>s.\nReturns the componentwise maximum of two <code>Point</code>s\nReturns the componentwise maximum of two <code>Size</code>s.\nReturns the componentwise minimum of two <code>Point</code>s\nReturns the componentwise minimum of two <code>Size</code>s.\nReturns the componentwise multiplication of two <code>Point</code>s.\nReturns the componentwise multiplication of two <code>Size</code>s.\nReturns <code>true</code> if the given point is inside the shape.\nCreates a cropped draw target based on this draw target.\nConvert a number (interpreted as degrees) to an <code>Angle</code>.\nPauses execution for at minimum <code>ms</code> milliseconds. Pause can …\nPauses execution for at minimum <code>ns</code> nanoseconds. Pause can …\nPauses execution for at minimum <code>us</code> microseconds. Pause can …\nDraw the graphics object using the supplied DrawTarget.\nDraws the entire image to the target.\nDraws the pixel iterator to a draw target.\nDraw individual pixels to the display without a defined …\nDraws a part of the image to the target.\nFill a given area with an iterator providing a contiguous …\nFill a given area with a solid color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an angle defined in degrees.\nCreates an angle defined in radians.\nConverts a <code>u32</code> into a <code>RawData</code> type.\nReturns the green channel value.\nThe height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this raw data into the storage type.\nConverts a contiguous iterator into a pixel iterator.\nConvert the <code>PixelColor</code> into its raw storage form\nConverts this primitive into a <code>Styled</code>.\nIs the input pin high?\nIs the input pin low?\nReturns the luma channel value.\nCreates a point from  X and Y coordinates.\nCreates a size from a width and a height.\nCreates a point with X and Y values set to an equal value.\nCreates a size with width and height set to an equal value.\nNormalize the angle to less than one full rotation (ie. in …\nOffsets the outline of the shape.\nReturns an iterator over all points inside the primitive.\nReturns the red channel value.\nConvert a number (interpreted as radians) to an <code>Angle</code>.\nDo a read within a transaction.\nSaturating addition.\nSaturating subtraction.\nDrives the pin high.\nDrives the pin low.\nDrives the pin high or low depending on the provided value.\nReturns the size of the bounding box.\nOffsets a point by subtracting a size.\nOffsets a point by subtracting a size.\nReturns a sub image of this image drawable.\nConverts a color into a byte array with big endian byte …\nReturn numerical value of the angle in degree\nConverts a color into a byte array with little endian byte …\nConverts a color into a byte array with native byte order.\nReturn numerical value of the angle in radian\nPerform a transaction against the device.\nDo a transfer within a transaction.\nDo an in-place transfer within a transaction.\nMove the origin of an object by a given number of (x, y) …\nMove the origin of an object by a given number of (x, y) …\nCreates a translated draw target based on this draw target.\nReturns a translated version of the iterator.\nThe width.\nDo a write within a transaction.\nThe x coordinate.\nReturns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.\nReturns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.\nThe y coordinate.\nReturns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.\nReturns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.\nCreates a point with X and Y equal to zero.\nCreates a size with width and height equal to zero.\nCreates a zero degree angle.")